nextjs 간단 설명

초기 구성
nextjs express truffle 

0. nextjs : SG + SSR
1. CSR : !doctype 1개에서 돌아다니는 것 SSR : !doctype이 여러개 생기는 것
2. SG : npm run build시 !doctype 미리 만들어 놓는 것 SSR : 어떤 요청이 들어왔을 때마다 만드는 것
2. SG에서 할 수 있는 건 SG로 다 해야함. SSR 많이 쓰면 성능 이슈(권고사항)
3. 리액트랑 사용법 다 똑같음 처음에는 몇가지만 유의하면 댐
4. Node.js 12.22.0 or later 기준 docs임.
5. npx create-next-app@latest or yarn create next-app
6. 이해 쉽게 create-react-app 과 비교하면서 설명하겠음
7. 둘의 가장 큰 차이라면 next는 pages 디렉토리와 react는 src 디렉토리
8. 안의 파일 작성 방법은 100% 똑같음
9. /pages 에 컴포넌트 /public 에 정적 파일
10. 파일명과 컴포넌트 함수명 동일하게 해주기. ex. abc.js 면 export default Abc
11. SG 설명
- 컨텐츠가 외부 데이터를 사용한다 : getStaticProps 사용
- 경로가 외부 데이터를 사용한다(예를들어, /join/1, /join/2) : getStaticPaths or getStaticProps
- 쉽게 말해 ajax 로 뭐 가져왔다 -> 위에 두 함수로 컴포넌트 써줘야 한다
12. SSR 설명
- 위 설명과 동일. getServerSideProps 사용
13. SG는 build시에 한번만 실행 됨. 그래서 ajax 요청으로 매번 다른 값을 불러오고 싶다 => SSR를 사용해야함
14. 그래서 Next 공식문서에서는 만약 데이터의 변동이 매우 빈번하게 일어난다면 굳이 (데이터에 대한) pre-rendering을 취하지 말고 기존 pure react에서 처럼 data-fetching을 통해 클라이언트 사이드에서 렌더링 할 것을 권고하고 있다.
15. nextjs에서 라우팅은 /pages에 파일 이름을 따른다. ex. /pages/join.js => /join url 동적 라우팅은 위에 SG참조
16. react 등의 Link 역시 사용 가능하다. docs 참조
17. API routes(req, res) 사용 할 수 있다. /pages/api에서 한다. docs 참조
18. express에서 연결 방법이 조오금 다르다. 최대한 기존 것은 주석 처리 하고 next에서 렌더링 하는 것 적어 놨으니까
19. https://nextjs.org/docs/advanced-features/custom-server 참고하면서 보면 될듯
20. 빌드 하고 시작하면 되는데 package.json 참조
21. 디렉토리 구조를 잘 보면 좋을 것 같음. 비교하라고 최대한 같이 써놈
22. pages/index에 기본 nextjs, truffle-nextjs 두개 다 놔둠