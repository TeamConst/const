만들어 놨던 컴포넌트가 bestcollection과 그에 연결된 buysell 이었는데 
이제 토대로 추가적인 컴포넌트를 만들어야 하니까 간단히 정리 한번 하고 넘어가겠슴

현재 데이터 페칭을 여러가지로 로직으로 구성해보고 있다

1-1 BestCollection (인기 상품)
- 데이터 받아온 곳 : AWS S3
- 연결 방식 : AWS S3 모듈 사용 
- 그렇게 구성한 이유 : 이미지를 받아올 때 RESTful 관점에서 주소를 통해 받아올 수도 있지만, 이건 내가 내 데이터를 열어 놨기 때문에 가능한 것이고, 나중에 보안 이슈를 다룰 때나, AWS S3 내의 권한 등의 조건을 건드릴 경우 이 방식이 적절할 것 같아 구성을 하였다.

1-2 buysell (상품 클릭했을 시 구매 페이지로 넘어가는)
- 데이터 받아온 곳 : 로컬 Database
- 연결 방식 : 이미지 CID를 파라미터로 받아와 DB 검색
- 그렇게 구성한 이유 : 로컬 db 또한 구성해보는 것이 연습에 도움이 된다고 생각 + 전에 말했던 컨트랙트를 구매 혹은 경매 버튼을 클릭했을 때만 실행시키고 그 외에는 간단한 데이터들로만 컴포넌트를 구성하는 식이 속도, 성능면에서 유리하지 않을까 생각을 해서

이제 1를 토대로 실제 구매, 경매 하는 컴포넌트를 구성해보면

2. getBuy, setBuy ( 구매 올려놓은 상품들과, 그 상품을 살 때의 컴포넌트 ) 걍 1번 클론
- 데이터 받아온 곳 : 컨트랙트로 불러와도 되는데 1번 결 대로 그냥 이어나가도 될 것 같음. 3번에서 깊게 설명함

3-1. getAuction(경매 중인 물품들 나열), setAuction(실제 경매)
- 데이터 받아온 곳 : 컨트랙트
- 연결방식 : web3
- 그렇게 구성한 이유 : 원래는 1, 2번 대로 굳이 처음부터 컨트랙트 안불러오고 다른 가벼운 데이터들로 구성해놓고 버튼 클릭했을 때만 컨트랙트 불러와도 되는데,
차이점이 이제 경매라면 실시간 정보 업데이트가 중요 할 것이라 판단해서 소켓통신을 구성했고, 이에 대한 처리를 능숙하게 하기 위해 컨트랙트를 계속해서 베이스에 두었다.


++ 정적 데이터들로만 구성해도 괜찮은 컴포넌트는 일단 초기에는 컨트랙트를 부르지 않는 식으로 하겠음. 사실 컨트랙트가 얼마나 무거운지도 잘 모름. 별 차이 없을 수도 있음ㅋㅋ
++ 예를 들면 이주의 핫 상품, 한달 동안의 핫 상품, 이번달의 우수 상품 등 서버 렌더링을 굳이 거쳐야 하지 않는 정적으로 만들어서 계속 뿌려도 되는 컴포넌트를 만들 것인데
++ 생각 해둔 로직이 DB 쿼리로 데이터 나누고, 그걸로 S3 받아오던가. 아니면 S3 디렉토리 구조를 바꾸는 로직을 만들어놔서 S3 디렉토리를 더 세분화 하는 걸 중점으로 하는 로직인데,
++ 전자가 더 간편하고 좋은 것 같음. 전자로 진행을 하겠다.